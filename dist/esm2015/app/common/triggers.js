import { animate, state, style, transition, trigger, useAnimation } from '@angular/animations';
import * as animations from './animations';
/**
 * BounceInUp and BounceOutDown: (inspired by: https://daneden.github.io/animate.css/)
 */
export const bounceInAndOut = trigger('bounceInAndOut', [
    transition(':enter', useAnimation(animations.bounceInUp)),
    transition(':leave', useAnimation(animations.bounceOutDown)),
]);
/**
 * grow or shrink when the element enters or leaves.
 */
export const growInShrinkOut = trigger('growInShrinkOut', [
    transition(':enter', useAnimation(animations.growIn)),
    transition(':leave', useAnimation(animations.shrinkOut)),
]);
/**
 * add this trigger to an element to add a simple fade animation, sliding to and from the right when entering or leaving
 */
export const enterAndLeaveFromRight = trigger('enterAndLeaveFromRight', [
    transition(':enter', useAnimation(animations.slideFadeIn)),
    transition(':leave', useAnimation(animations.slideFadeOut)),
]);
/**
 * add this trigger to an element to add a simple fade animation, sliding to and from the left when entering or leaving
 */
export const enterAndLeaveFromLeft = trigger('enterAndLeaveFromLeft', [
    transition(':enter', animations.useSlideFadeInAnimation(undefined, '-100%')),
    transition(':leave', animations.useSlideFadeOutAnimation(undefined, '-100%')),
]);
/**
 * add this trigger to an element to add a simple fade animation when entering or leaving the dom
 */
export const fadeInAndOut = trigger('fadeInAndOut', [
    transition(':enter', animations.useSlideFadeInAnimation(undefined, '0px')),
    transition(':leave', animations.useSlideFadeOutAnimation(undefined, '0px')),
]);
/**
 * swing the element when it first enters or leaves the DOM
 */
export const swingInAndOut = trigger('swingInAndOut', [
    transition(':enter', useAnimation(animations.swingIn)),
    transition(':leave', useAnimation(animations.swingOut)),
]);
/**
 * Fade in, pause, then fade out
 * like a page indicator when scrolling in most PDF viewers (including ngWebViewer).
 *
 * To use, set trigger equal to a value. Whenever that value changes, the animation will run.
 */
export const fadeInThenOut = trigger('fadeInThenOut', [
    state('*', style({ opacity: 0 })),
    transition('* => *', [
        animate('200ms', style({ opacity: 1 })),
        animate('500ms 1s ease-out', style({ opacity: 0 })),
    ]),
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1zb2Z0bm90aWZ5LyIsInNvdXJjZXMiOlsiYXBwL2NvbW1vbi90cmlnZ2Vycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUNJLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRyxPQUFPLEtBQUssVUFBVSxNQUFNLGNBQWMsQ0FBQztBQUUzQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEVBQUU7SUFDdEQsVUFBVSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pELFVBQVUsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUM3RCxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsaUJBQWlCLEVBQUU7SUFDeEQsVUFBVSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JELFVBQVUsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUN6RCxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRTtJQUN0RSxVQUFVLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUQsVUFBVSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQzVELENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixFQUFFO0lBQ3BFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM1RSxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDOUUsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRTtJQUNsRCxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsd0JBQXdCLENBQUUsU0FBUyxFQUFHLEtBQUssQ0FBQyxDQUFDO0NBQzlFLENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxlQUFlLEVBQUU7SUFDcEQsVUFBVSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELFVBQVUsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUN4RCxDQUFDLENBQUM7QUFFSDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsZUFBZSxFQUFFO0lBQ3BELEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakMsVUFBVSxDQUFDLFFBQVEsRUFBRTtRQUNuQixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNwRCxDQUFDO0NBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgYW5pbWF0aW9uLCBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSwgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLCBncm91cCxcclxuICBrZXlmcmFtZXMsIHF1ZXJ5LCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIsIHVzZUFuaW1hdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xyXG5pbXBvcnQgKiBhcyBhbmltYXRpb25zIGZyb20gJy4vYW5pbWF0aW9ucyc7XHJcblxyXG4vKipcclxuICogQm91bmNlSW5VcCBhbmQgQm91bmNlT3V0RG93bjogKGluc3BpcmVkIGJ5OiBodHRwczovL2RhbmVkZW4uZ2l0aHViLmlvL2FuaW1hdGUuY3NzLylcclxuICovXHJcbmV4cG9ydCBjb25zdCBib3VuY2VJbkFuZE91dCA9IHRyaWdnZXIoJ2JvdW5jZUluQW5kT3V0JywgW1xyXG4gIHRyYW5zaXRpb24oJzplbnRlcicsIHVzZUFuaW1hdGlvbihhbmltYXRpb25zLmJvdW5jZUluVXApKSxcclxuICB0cmFuc2l0aW9uKCc6bGVhdmUnLCB1c2VBbmltYXRpb24oYW5pbWF0aW9ucy5ib3VuY2VPdXREb3duKSksXHJcbl0pO1xyXG5cclxuLyoqXHJcbiAqIGdyb3cgb3Igc2hyaW5rIHdoZW4gdGhlIGVsZW1lbnQgZW50ZXJzIG9yIGxlYXZlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBncm93SW5TaHJpbmtPdXQgPSB0cmlnZ2VyKCdncm93SW5TaHJpbmtPdXQnLCBbXHJcbiAgdHJhbnNpdGlvbignOmVudGVyJywgdXNlQW5pbWF0aW9uKGFuaW1hdGlvbnMuZ3Jvd0luKSksXHJcbiAgdHJhbnNpdGlvbignOmxlYXZlJywgdXNlQW5pbWF0aW9uKGFuaW1hdGlvbnMuc2hyaW5rT3V0KSksXHJcbl0pO1xyXG5cclxuLyoqXHJcbiAqIGFkZCB0aGlzIHRyaWdnZXIgdG8gYW4gZWxlbWVudCB0byBhZGQgYSBzaW1wbGUgZmFkZSBhbmltYXRpb24sIHNsaWRpbmcgdG8gYW5kIGZyb20gdGhlIHJpZ2h0IHdoZW4gZW50ZXJpbmcgb3IgbGVhdmluZ1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVudGVyQW5kTGVhdmVGcm9tUmlnaHQgPSB0cmlnZ2VyKCdlbnRlckFuZExlYXZlRnJvbVJpZ2h0JywgW1xyXG4gIHRyYW5zaXRpb24oJzplbnRlcicsIHVzZUFuaW1hdGlvbihhbmltYXRpb25zLnNsaWRlRmFkZUluKSksXHJcbiAgdHJhbnNpdGlvbignOmxlYXZlJywgdXNlQW5pbWF0aW9uKGFuaW1hdGlvbnMuc2xpZGVGYWRlT3V0KSksXHJcbl0pO1xyXG5cclxuLyoqXHJcbiAqIGFkZCB0aGlzIHRyaWdnZXIgdG8gYW4gZWxlbWVudCB0byBhZGQgYSBzaW1wbGUgZmFkZSBhbmltYXRpb24sIHNsaWRpbmcgdG8gYW5kIGZyb20gdGhlIGxlZnQgd2hlbiBlbnRlcmluZyBvciBsZWF2aW5nXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZW50ZXJBbmRMZWF2ZUZyb21MZWZ0ID0gdHJpZ2dlcignZW50ZXJBbmRMZWF2ZUZyb21MZWZ0JywgW1xyXG4gIHRyYW5zaXRpb24oJzplbnRlcicsIGFuaW1hdGlvbnMudXNlU2xpZGVGYWRlSW5BbmltYXRpb24odW5kZWZpbmVkLCAnLTEwMCUnKSksXHJcbiAgdHJhbnNpdGlvbignOmxlYXZlJywgYW5pbWF0aW9ucy51c2VTbGlkZUZhZGVPdXRBbmltYXRpb24odW5kZWZpbmVkLCAnLTEwMCUnKSksXHJcbl0pO1xyXG5cclxuLyoqXHJcbiAqIGFkZCB0aGlzIHRyaWdnZXIgdG8gYW4gZWxlbWVudCB0byBhZGQgYSBzaW1wbGUgZmFkZSBhbmltYXRpb24gd2hlbiBlbnRlcmluZyBvciBsZWF2aW5nIHRoZSBkb21cclxuICovXHJcbmV4cG9ydCBjb25zdCBmYWRlSW5BbmRPdXQgPSB0cmlnZ2VyKCdmYWRlSW5BbmRPdXQnLCBbXHJcbiAgdHJhbnNpdGlvbignOmVudGVyJywgYW5pbWF0aW9ucy51c2VTbGlkZUZhZGVJbkFuaW1hdGlvbih1bmRlZmluZWQsICcwcHgnKSksXHJcbiAgdHJhbnNpdGlvbignOmxlYXZlJywgYW5pbWF0aW9ucy51c2VTbGlkZUZhZGVPdXRBbmltYXRpb24oIHVuZGVmaW5lZCwgICcwcHgnKSksXHJcbl0pO1xyXG5cclxuLyoqXHJcbiAqIHN3aW5nIHRoZSBlbGVtZW50IHdoZW4gaXQgZmlyc3QgZW50ZXJzIG9yIGxlYXZlcyB0aGUgRE9NXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc3dpbmdJbkFuZE91dCA9IHRyaWdnZXIoJ3N3aW5nSW5BbmRPdXQnLCBbXHJcbiAgdHJhbnNpdGlvbignOmVudGVyJywgdXNlQW5pbWF0aW9uKGFuaW1hdGlvbnMuc3dpbmdJbikpLFxyXG4gIHRyYW5zaXRpb24oJzpsZWF2ZScsIHVzZUFuaW1hdGlvbihhbmltYXRpb25zLnN3aW5nT3V0KSksXHJcbl0pO1xyXG5cclxuLyoqXHJcbiAqIEZhZGUgaW4sIHBhdXNlLCB0aGVuIGZhZGUgb3V0XHJcbiAqIGxpa2UgYSBwYWdlIGluZGljYXRvciB3aGVuIHNjcm9sbGluZyBpbiBtb3N0IFBERiB2aWV3ZXJzIChpbmNsdWRpbmcgbmdXZWJWaWV3ZXIpLlxyXG4gKlxyXG4gKiBUbyB1c2UsIHNldCB0cmlnZ2VyIGVxdWFsIHRvIGEgdmFsdWUuIFdoZW5ldmVyIHRoYXQgdmFsdWUgY2hhbmdlcywgdGhlIGFuaW1hdGlvbiB3aWxsIHJ1bi5cclxuICovXHJcbmV4cG9ydCBjb25zdCBmYWRlSW5UaGVuT3V0ID0gdHJpZ2dlcignZmFkZUluVGhlbk91dCcsIFtcclxuICBzdGF0ZSgnKicsIHN0eWxlKHsgb3BhY2l0eTogMCB9KSksXHJcbiAgdHJhbnNpdGlvbignKiA9PiAqJywgW1xyXG4gICAgYW5pbWF0ZSgnMjAwbXMnLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpLFxyXG4gICAgYW5pbWF0ZSgnNTAwbXMgMXMgZWFzZS1vdXQnLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxyXG4gIF0pLFxyXG5dKTtcclxuIl19